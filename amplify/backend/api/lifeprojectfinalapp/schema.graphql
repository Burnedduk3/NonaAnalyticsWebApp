type Form @model {
  id: ID!
  formQuestions: [FormQuestion] @connection(name: "FormQuestions")
  UserID: String!
  finished: Boolean
  percentage: Float!
}

type FormQuestion @model {
  id: ID!
  response: String!
  question: Question @connection(name: "QuestionsString")
  form: Form @connection(name: "FormQuestions")
}

type Question @model {
  id: ID!
  question: String!
  stack: Int!
  stackPhrase: String
  placeHolder: String
  usedForms: [FormQuestion] @connection(name: "QuestionsString")
  category: Category @connection(name: "Category")
  subSection: SubSection @connection(name: "SubSectionQuestions")
  order: Int!
  items: [String]
  imagesPath: [String]
  inputConfirmation: String!
}

type Category @model {
  id: ID!
  name: String!
  questions: [Question] @connection(name: "Category")
}

type Section @model {
  id: ID!
  name: String!
  subSections: [SubSection] @connection(name: "SubSection")
  order: Int!
}

type SubSection @model {
  id: ID!
  name: String!
  section: Section @connection(name: "SubSection")
  questions: [Question] @connection(name: "SubSectionQuestions")
  order: Int!
}

input CreateCreateUserResponseInput {
  ID: String!
  formID: String
  questionId: String
  response: String
  subSection: String
  section: String
  userID: String
}

type CreateUserResponse {
  ID: String!
  formID: String
  questionId: String
  response: String
  subSection: String
  section: String
  userID: String
}

input UpdateCreateUserResponseInput {
  ID: String!
  formID: String
  questionId: String
  response: String
  subSection: String
  section: String
  userID: String
}

type Mutation {
  deleteCreateUserResponse(ID: String!): CreateUserResponse
  createCreateUserResponse(createCreateUserResponseInput: CreateCreateUserResponseInput!): CreateUserResponse
  updateCreateUserResponse(updateCreateUserResponseInput: UpdateCreateUserResponseInput!): CreateUserResponse
  deleteUserInfo(userID: String!): UserInfo
  createUserInfo(createUserInfoInput: CreateUserInfoInput!): UserInfo
  updateUserInfo(updateUserInfoInput: UpdateUserInfoInput!): UserInfo
}

type Query {
  getCreateUserResponse(ID: String!): CreateUserResponse
  listCreateUserResponses: [CreateUserResponse]
  getUserInfo(userID: String!): UserInfo
  listUserInfos: [UserInfo]
}

type Subscription {
  onCreateCreateUserResponse: CreateUserResponse @aws_subscribe(mutations: ["createCreateUserResponse"])
  onCreateUserInfo: UserInfo @aws_subscribe(mutations: ["createUserInfo"])
}

input CreateUserInfoInput {
  userID: String!
  fName: String
  lName: String
  userEmail: String
}

type UserInfo {
  userID: String!
  fName: String
  lName: String
  userEmail: String
}

input UpdateUserInfoInput {
  userID: String!
  fName: String
  lName: String
  userEmail: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
